 
Security - ACL
~~~~~~~~~~~~~~~~~~~~

 The ACL Tab defines the Access Control List for a workitem processed by the Imixs Workflow. 
 An ACL defines the read- and write access a user will be granted for after the workitem was successful processed. 
 This is one of the most important features of the Imixs Workflow System.

[images/activity_acl.png] 

 The ACL can be defined in a static and a dynamic way. To activate the feature the option 'Change ACL Settings' has to be checked. 
 
 
*Static ACL
~~~~~~~~~~~~~~~~~~~~

 In the field 'Other' Roles or UserIDs can be defined in a static way. This means Roles and/or User IDs 
 are added statically into the ACL of the workitem which is currently processed by the Imixs Workflow Manager. 
 A UserID have to match the login name of a user. Names of roles have to match the security roles defined by the application. 
 The Imixs standard roles which can be used here are
 
    * org.imixs.ACCESSLEVEL.READACCESS

    * org.imixs.ACCESSLEVEL.AUTHORACCESS

    * org.imixs.ACCESSLEVEL.EDITORACCESS

    * org.imixs.ACCESSLEVEL.MANAGERACCESS

*Actors - dynamic ACL
~~~~~~~~~~~~~~~~~~~~

 The other way of managing the ACL on a workitem is the definition of dynamic computed actors. 
 Actors play an essential role in a user-centric workflow system. The actors are users who 
 actively interfere with the data of a workitem during a process.
 For example, protagonists launch actions or perform individual 
 tasks. On the other hand, actors can also be passively involved in a workflow.  - for instance, 
 as recipients of an e-mail notification.
 An actor is always an abstract role defined in a workflow model. The UserIDs behind the actor 
 can not be named during the modeling phase, because they depend on the workitem data to be processed in a single workflow step.  

 In the Imixs Workflow Modeler, actors can be defined in the workflow profile section for each model.
 The actors are computed from properties of the workitem being processed. The corresponding property 
 contains the real Roles or UserIDs to be added into the ACL of a workitem.
 
 The actors used for dynamic ACL settings can be defined in the 'Profile' section of the Imixs Modeller. 
 
[images/model_profile.png]  

 Click on button "Add" and enter the display name and a property name to be used for dynamic ACL definition. 
 The display name and the property name are separated  by a | character. E.g: "Team | namTeamList". 

 Example:
 
+------------------------------+
Creator | namCreator
Last Editor | namCurrentEditor
Team | namTeam
Delegate | namDelegate 
+------------------------------+
 


*Changing the ACL
~~~~~~~~~~~~~~~~~~~~
 To change the ACL settings for a workitem being processed the option 'Change ACL Settings'
 has to be checked. 
 The read- and write-access for a workitem can be changed by checking the actors previously defined.
 Any existing ACL settings of a workitem will be cleared and replaced with the new definition. 


*The 'AccessPlugin'
~~~~~~~~~~~~~~~~~~~~
 The update of a workitems ACL is managed by the AccessPlugin (org.imixs.workflow.plugins.AccessPlugin).
 This plugin must be added in the plugin definition list of the model profile. 
 
*How it works
~~~~~~~~~~~~~~~~~~~~
 When a workitem is processed with an activity containing a dynamic ACL definition,
 the AccessPlugin reads the data of the corresponding property of the currently processed workitem. 
 The result is added into the $writeAccess or $readAccess property. 
 It is the responsibility of an application to provide useful data here (RoleNames or UserIDs). 
 For example, if an actor with the definition 'Team|namTeamMembers' is used, then the application have to 
 manage the content of the property 'namTeamMembers' of each workitem to be processed.
 
 The actors can also be computed by a custom plugin which can be added into the model definition.
 Such a plugin can compute the RoleNames/UserIds during processing and update a workitem property
 - for example 'namTeamMembers'. The AccessPlugin will then use this data to update the ACL. 
 It is important that a custom plugin is listed before the AccessPlugin in the plugin definition.
 Otherwise the AccessPlugin can not read out the new actors.
 

   
 
